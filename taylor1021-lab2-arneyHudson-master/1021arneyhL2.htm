<meta charset="utf-8" lang="en">            <style class="fallback">body{visibility:hidden;}</style>
<!---


                       DOWNLOAD AND OPEN IN A BROWSER
                          TO SEE PROPER FORMATTING


--->
**Lab 2: Interfaces**
    Username: arneyh
    Date: 12-13-2021
    Course: CS1021
    Submitted to: Dr. Chris Taylor

!!! METRIcS: Instructor Feedback
    | Earned | Possible | Criteria                                         |
    | ------ | -------- | ------------------------------------------------ |
    |   10   |    10    | In lab demo                                      |
    |   30   |    30    | Instructor tests (see end of document)           |
    |   45   |    45    | Technical quality (see point deductions in code) |
    |   10   |    10    | Coding standard compliance and program clarity   |
    |    5   |     5    | Following submission instructions                |

    [Nicely Done](https://msoe.us/taylor/Nice)

# BakedIngredient.java

~~~~ Java
/*
 * Course: CS 1021 021
 * Winter 2021-2022
 * Lab 2
 * Name: Hudson Arney
 * Created: 12/6/2021
 * Updated: 12/13/2021
 */

package arneyh;

/**
 * Baked Ingredient class that uses methods from the Ingredient interface
 * Takes a base ingredient that will be "baked" and runs the given methods
 * on this ingredient.
 */
public class BakedIngredient implements Ingredient {
    private final Ingredient baseIngredient;
    private final double expansionFactor;

    /**
     * Baked Ingredient Constructor that takes in a baseIngredient and a user-provided
     * expansion factor.
     * @param ingredient of type Ingredient. Is the single item focused on in the bake
     * @param expansionFactor a number that will expand the volume of the given item while baking
     */
    public BakedIngredient(Ingredient ingredient, double expansionFactor) {
        this.baseIngredient = ingredient;
        this.expansionFactor = expansionFactor;
    }

    @Override
    public double getCalories() {
        return baseIngredient.getCalories();
    }

    @Override
    public double getCups() {
        return baseIngredient.getCups() * expansionFactor;
    }

    @Override
    public String getName() {
        return "Baked " + baseIngredient.getName();
    }

    @Override
    public boolean isDry() {
        return true;
    }

    @Override
    public void printRecipe() {
        System.out.println("====================================================");
        System.out.println("Baked " + baseIngredient.getName());
        System.out.println("====================================================");
        System.out.println("Ingredient to be baked: " + baseIngredient.getName());
        System.out.println("Cups: " + CUP_FORMAT.format(baseIngredient.getCups() * expansionFactor)
                + " Cups");
        System.out.println("Energy: " + (int) baseIngredient.getCalories() + " Calories\n");

        baseIngredient.printRecipe();
    }
}
~~~~

# EvaporatedMilk.java

~~~~ Java
/*
 * Course: CS 1021 021
 * Winter 2021-2022
 * Lab 2
 * Name: Hudson Arney
 * Created: 12/6/2021
 * Updated: 12/13/2021
 */

package arneyh; // replace with your username.

/**
 * Driver class that illustrates making evaporated milk by baking milk.
 */
public class EvaporatedMilk {
    /** The milk to be baked */
    private static final Ingredient MILK =
            new SimpleIngredient(103.0, 1.0, false, "Milk");

    /** Ratio of volume after evaporating to before */
    public static final double DEHYDRATION_FACTOR = 0.2;

    public static void main(String[] args) {
        Ingredient milk = MILK;
        Ingredient evaporatedMilk = new BakedIngredient(milk, DEHYDRATION_FACTOR);
        evaporatedMilk.printRecipe();
    }
}

~~~~

# Ingredient.java

~~~~ Java
/*
 * Course: CS 1021 021
 * Winter 2021-2022
 * Lab 2
 * Name: Hudson Arney
 * Created: 12/6/2021
 * Updated: 12/13/2021
 */

package arneyh;

import java.text.DecimalFormat;

~~~~ Java highlight
public interface Ingredient {
~~~~
!!! MINUS: Class Javadoc requirements
    The [Coding Standard](https://csse.msoe.us/cs1021/codingstandard) requires
    the following:
    <blockquote>Class comments - each class is commented using Javadoc style.

    * The comment contains a brief description of the class.
    * <mark>The class comment for the class containing the `main` method describes the entire program.</mark></blockquote>

    Also note that:
    <blockquote>
    * <mark>Interfaces are commented using the same principles as classes.</mark></blockquote>

~~~~ Java

    public static final DecimalFormat CUP_FORMAT = new DecimalFormat("#.##");

    public double getCalories();
    public double getCups();
    public String getName();
    public boolean isDry();
~~~~ Java highlight
    public void printRecipe();
~~~~
!!! MINUS: Method Javadoc requirements
    The [Coding Standard](https://csse.msoe.us/cs1021/codingstandard) requires
    the following:
    <blockquote>Method comments - All methods are commented using Javadoc style, with the following exceptions:
     * Getters and setters which typically are not commented.
     * The `main` method is typically only documented if command line arguments are used.

    ```
    /**
     * This method prints out "Hello" to the person given and
     * returns the number of letters in the person's name.
     *
     * @param name The person to who to say hello.
     * @return The number of characters in the person's name.
     */
    ```
    </blockquote>

~~~~ Java

}
~~~~

# Kitchen.java

~~~~ Java
/*
 * Course: CS 1021 021
 * Winter 2021-2022
 * Lab 2
 * Name: Hudson Arney
 * Created: 12/6/2021
 * Updated: 12/13/2021
 */

package arneyh; // change to your username

import java.util.Scanner;

/**
 * The driver class: Builds recipes out of ingredients
 */
public class Kitchen {
    private static final Ingredient BUTTER =
            new SimpleIngredient(810, 0.5, false, "Butter");
    private static final Ingredient CREAM =
            new SimpleIngredient(104, 1/8., false, "Cream");
    private static final Ingredient MILK =
            new SimpleIngredient(103, 1, false, "Milk");
    private static final Ingredient SUGAR =
            new SimpleIngredient(773, 1, true, "Sugar");
    private static final Ingredient FLOUR =
            new SimpleIngredient(455, 1, true, "Flour");
    /**
     * The ratio of the dried milk to the original milk's volume
     */
    public static final double DEHYDRATION_FACTOR = 0.2;
    /**
     * The multiplier indicating how the cake's volume expands while baking
     */
    public static final double CAKE_EXPANSION_FACTOR = 1.2;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String command = solicitCommand(in);
        while(!command.equals("quit")) {
            switch (command) {
                case "dry milk":
                    makeDryMilk();
                    break;
                case "ice cream":
                    makeIceCream();
                    break;
                case "cookies":
                    makeCookies();
                    break;
                case "cake":
                    makeCake();
                    break;
                default:
                    System.out.println("Unrecognized command: " + command);
            }
            command = solicitCommand(in);
        }

    }

    /**
     * Prints out the main menu and allows the user to choose an
     * option from that menu
     * @param in A scanner which should point to System.in
     * @return The keyword the user typed
     */
    private static String solicitCommand(Scanner in) {
        System.out.println("Please enter an option:");
        System.out.println(" dry milk - Make dehydrate milk");
        System.out.println(" ice cream - Make ice cream");
        System.out.println(" cookies  - Make cookies");
        System.out.println(" cake  - Make a cake");
        System.out.println(" quit - exit the program");
        return in.nextLine();
    }

    private static void makeDryMilk() {
        Ingredient evaporatedMilk = new BakedIngredient(MILK, DEHYDRATION_FACTOR);
        evaporatedMilk.printRecipe();
    }

    private static void makeIceCream() {
// https://cooking.nytimes.com/recipes/1016605-the-only-ice-cream-recipe-youll-ever-need
//        2  cups heavy cream
//        1  cup whole milk
//        2/3  cup sugar
//        1/8  teaspoon fine sea salt
//        6  large egg yolks
        Mix iceCream = new Mix("Ice Cream");
        iceCream.addIngredient(CREAM);
        iceCream.addIngredient(MILK);
        iceCream.addIngredient(SUGAR);
        iceCream.printRecipe();
    }

    private static void makeCookies() {
        Mix cookies = new Mix("Cookies");
        // https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/
        cookies.addIngredient(new Measure(1, BUTTER));
        cookies.addIngredient(new Measure(3, SUGAR));
        cookies.addIngredient(new Measure(3, FLOUR));

        cookies.printRecipe();
    }

    private static void makeCake() {
        // https://www.allrecipes.com/recipe/17481/simple-white-cake/
        Mix batter = new Mix("Batter");
        batter.addIngredient(new Measure(1, SUGAR));
        batter.addIngredient(new Measure(1, 2, BUTTER));
        batter.addIngredient(new Measure(3, 2, FLOUR));
        batter.addIngredient(new Measure(1, 2, MILK));

        Mix frosting = new Mix("Frosting");
        frosting.addIngredient(new Measure(4, SUGAR));
        frosting.addIngredient(BUTTER); // two sticks of butter...
        frosting.addIngredient(BUTTER);

        Mix cake = new Mix("Cake");
        cake.addIngredient(new BakedIngredient(batter, CAKE_EXPANSION_FACTOR));
        cake.addIngredient(new Measure(3, 2, frosting));

        cake.printRecipe();
    }
}

~~~~

# Measure.java

~~~~ Java
/*
 * Course: CS 1021 021
 * Winter 2021-2022
 * Lab 2
 * Name: Hudson Arney
 * Created: 12/6/2021
 * Updated: 12/13/2021
 */

package arneyh;

/**
 * Measure class that uses methods from the Ingredient interface
 *
 */
public class Measure implements Ingredient {
    private final Ingredient baseIngredient;
    private final int numerator;
    private final int denominator;

    /**
     * Measure constructor if not given a denominator.
     * The denominator defaults to one and calls the default constructor
     * @param numerator an int that determines the cups of ingredient
     * @param ingredient keeps track of a certain ingredient
     */
    public Measure(int numerator, Ingredient ingredient) {
        this(numerator, 1, ingredient);
    }

    /**
     * Default constructor
     * Takes a numerator, denominator, and ingredient which allows
     * the program to have fractions of certain ingredients
     * @param numerator numerator of fraction amount in a certain ingredient
     * @param denominator denominator of fraction in a certain ingredient
     * @param ingredient keeps track of a certain ingredient
     */
    public Measure(int numerator, int denominator, Ingredient ingredient) {
        this.numerator = numerator;
        this.denominator = denominator;
        this.baseIngredient = ingredient;
    }

    @Override
    public double getCalories() {
        return ((double)numerator/denominator) *
                (baseIngredient.getCalories() / baseIngredient.getCups());
    }

    @Override
    public double getCups() {
        if(denominator == 1) {
            return numerator;
        } else {
            return ((double) numerator / denominator);
        }
    }

    @Override
    public String getName() {
        if((double)numerator/denominator == 1) {
            return numerator + " Cup " + baseIngredient.getName();
        } else if(numerator > 1 && denominator == 1) {
            return numerator + " Cups " + baseIngredient.getName();
        } else if(numerator == 1 && denominator > 1) {
            return numerator + "/" + denominator + " Cup " + baseIngredient.getName();
        } else {
            return numerator + "/" + denominator + " Cups " + baseIngredient.getName();
        }
    }

    @Override
    public boolean isDry() {
        return baseIngredient.isDry();
    }

    @Override
    public void printRecipe() {
        System.out.println("====================================================");
        System.out.println(getName());
        System.out.println("====================================================");
        System.out.println("Measured ingredient: " + baseIngredient.getName());
        System.out.println(formatQuantity());
        System.out.println("Energy: " + Math.round(getCalories()) + " Calories\n");
        baseIngredient.printRecipe();
    }

    /**
     * Changes the output of the final output depending on the amount of
     * certain ingredients measured
     * @return The final string needed for the Measure output
     */
    private String formatQuantity() {
        double fractionOfIngredients = (double)numerator / denominator;
        String cupsOfMeasuredIngredient = "";
        if(fractionOfIngredients == 1) {
            cupsOfMeasuredIngredient += "Quantity: "+ (int)fractionOfIngredients
                    + " Cup (" + (int)fractionOfIngredients + " Cup)";
        } else if(numerator > 1 && denominator == 1) {
            cupsOfMeasuredIngredient += "Quantity: " + numerator
                    + " Cups (" + numerator + " Cups)";
        } else if(numerator == 1 && denominator > 1) {
            cupsOfMeasuredIngredient += "Quantity: " + numerator + "/" + denominator + " Cup (" +
                    CUP_FORMAT.format(fractionOfIngredients) + " Cups)";
        } else {
            cupsOfMeasuredIngredient += "Quantity: " + numerator + "/" + denominator + " Cups (" +
                    CUP_FORMAT.format(fractionOfIngredients) + " Cups)";
        }
        return cupsOfMeasuredIngredient;
    }
}


~~~~

# Mix.java

~~~~ Java
/*
 * Course: CS 1021 021
 * Winter 2021-2022
 * Lab 2
 * Name: Hudson Arney
 * Created: 12/6/2021
 * Updated: 12/13/2021
 */

package arneyh;

import java.util.ArrayList;
import java.util.List;

/**
 * Mix Class that uses methods from the Ingredient interface
 * Includes an ArrayList of ingredients
 */
public class Mix implements Ingredient {
    private final List&lt&#xFEFF;Ingredient> ingredients = new ArrayList&lt&#xFEFF;>();
    private final String name;

    /**
     * Mix constructor that takes in the name of the item
     * @param name name of the given item
     */
    public Mix(String name) {
        this.name = name;
    }

    /**
     * add Ingredient method will add to the ArrayList ingredients a certain item at a time
     * @param ingredient of type Ingredient that makes up the given item
     */
    public void addIngredient(Ingredient ingredient) {
        ingredients.add(ingredient);
    }

    /**
     * Goes through the ingredients ArrayList searching one Item at a time.
     * @return a boolean based on if the given ingredient is dry or not.
     */
    public boolean hasDryIngredient() {
        boolean dry = false;
        for (Ingredient ingredient : ingredients) {
            if (ingredient.isDry()) {
                dry = true;
            }
        }
        return dry;
    }

    /**
     * Uses the hasDryIngredient method and tests if the ingredient is not
     * dry, it must be wet.
     * @return a boolean based on if the given ingredient is wet or not.
     */
    public boolean hasWetIngredient() {
~~~~ Java highlight
        boolean dry = false;
        for (Ingredient ingredient : ingredients) {
            if (!ingredient.isDry()) {
                dry = true;
            }
        }
        return dry;
~~~~
!!! FEEDBACK: Bonus material... feel free to ignore
    We won't cover this until later in the quarter, but starting in version
    8 of Java, there is an alternative to the for-each loop that you may
    find interesting.  Modern versions of Java have added functional
    programming features that make it possible for us to implement this
    method in just one line:
    ```
    return ingredients.stream().anyMatch(ingredient -> !ingredient.isDry());
    ```

    The `ingredients.stream()` call returns a stream of data that has a
    number of methods that can be applied to it. The method `anyMatch()`
    is one of those methods. It requires that you pass it something called
    a `Predicate`. `Predicate` is an interface that requires one method
    to be implemented: `boolean test(Ingredient ingredient)`. We could that like this:

    ```
    public class WetChecker implements Predicate<Ingredient> {
        @Override
        public boolean test(Ingredient ingredient) {
            return !ingredient.isDry();
        }
    }
    ```

    Almost all of this class implementation is boilerplate code, and
    Java has made it easy to avoid typing all this stuff. In particular,
    if an interface has only one method that needs to be implemented, we
    can replace it with something called a lambda expression.

    Here the lambda expression is:

    ```
    ingredient -> !ingredient.isDry()
    ```

    This is essentially a replacement for the `test(Ingredient ingredient)`
    method which just says, if `ingredient` is passed to `test()`, it should
    return `!ingredient.isDry()`. In the above, we can pass the lambda
    expression to `anyMatch()` which then goes through all of the elements
    in the `stream` (i.e., all of the elements in the `ingredients` list)
    and applies the predicate method (`!ingredient.isDry()`) to each element.
    If any one of these evaluations is `true`, then the entire statement is
    `true`. That is, there is a wet ingredient.

    This ended up being a longer comment than I expected. Don't worry about
    this for now, but we will discuss it more around week 8.

~~~~ Java
    }

    @Override
    public double getCalories() {
        double cal = 0;
        for (Ingredient ingredient : ingredients) {
            cal += ingredient.getCalories();
        }
        return cal;
    }

    @Override
    public double getCups() {
        double cups = 0;
        for (Ingredient ingredient : ingredients) {
            cups += ingredient.getCups();
        }
        return cups;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public boolean isDry() {
        for (Ingredient ingredient : ingredients) {
            if (!ingredient.isDry()) {
                return false;
            }
        }
        return true;
    }

    @Override
    public void printRecipe() {
        System.out.println("====================================================");
        System.out.println(name);
        System.out.println("====================================================");
        System.out.println("Dry Ingredients:");
        for (Ingredient value : ingredients) {
            if (hasDryIngredient() && value.isDry()) {
                System.out.println("  " + value.getName());
            }
        }

        System.out.println("\nWet Ingredients:");
        for (Ingredient ingredient : ingredients) {
            if (hasWetIngredient() && !ingredient.isDry()) {
                System.out.println("  " + ingredient.getName());
            }
        }

        if(getCups() == (int)getCups()) {
            System.out.println("\nCups: " + CUP_FORMAT.format((int)getCups()) + " Cups");
        } else {
            System.out.println("\nCups: " + CUP_FORMAT.format(getCups()) + " Cups");
        }
        System.out.println("Energy: " + Math.round(getCalories()) + " Calories\n");

        for (Ingredient ingredient : ingredients) {
            ingredient.printRecipe();
        }
    }
}


~~~~

# SimpleIngredient.java

~~~~ Java
/*
 * Course: CS 1021 021
 * Winter 2021-2022
 * Lab 2
 * Name: Hudson Arney
 * Created: 12/6/2021
 * Updated: 12/13/2021
 */

package arneyh;

/**
 * SimpleIngredient Class uses the methods from the Ingredient interface
 * and implements values to those references
 * This is the default class for all ingredients
 */
public class SimpleIngredient implements Ingredient {
    private final double calories;
    private final double cups;
    private final boolean isDry;
    private final String name;

    /**
     * The Simple Ingredient constructor that takes in calories, cups, isDry, and name
     * @param calories the number of calories in a given item
     * @param cups the number of cups used in a given item
     * @param isDry a boolean if an item is dry or not
     * @param name the name of given item
     */
    public SimpleIngredient(double calories, double cups, boolean isDry, String name) {
        this.calories = calories;
        this.cups = cups;
        this.isDry = isDry;
        this.name = name;
    }
    public double getCalories() {
        return calories;
    }
    public double getCups() {
        return cups;
    }
    public String getName() {
        return name;
    }
    public boolean isDry() {
        return isDry;
    }

    /**
     * The print Recipe method follows the given output for the lab
     */
    public void printRecipe() {
        System.out.println("====================================================");
        System.out.println(name);
        System.out.println("====================================================");
        if(cups == (int)cups) {
            System.out.println("Cups: " + CUP_FORMAT.format((int)cups) + " Cups");
        } else {
            System.out.println("Cups: " + CUP_FORMAT.format(cups) + " Cups");
        }
        System.out.println("Energy: " + (int)calories + " Calories\n");
    }

}

~~~~


!!! BONUS: Good
    Nice work.

<!-- Markdeep: --><script src="https://csse.msoe.us/markdeep.js?graded"></script>
