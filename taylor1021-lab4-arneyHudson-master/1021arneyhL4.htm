<meta charset="utf-8" lang="en">            <style class="fallback">body{visibility:hidden;}</style>
<!---


                       DOWNLOAD AND OPEN IN A BROWSER
                          TO SEE PROPER FORMATTING


--->
**Lab 4: Inheritance with Shapes**
    Username: arneyh
    Date: 1-10-2022
    Course: CS1021
    Submitted to: Dr. Chris Taylor

!!! METRIcS: Instructor Feedback
    | Earned | Possible | Criteria                                         |
    | ------ | -------- | ------------------------------------------------ |
    |   85   |    85    | Technical quality (see point deductions in code) |
    |   10   |    10    | Coding standard compliance and program clarity   |
    |    5   |     5    | Following submission instructions                |

    [Nicely Done](https://msoe.us/taylor/Nice)

# Circle.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2022
 * Lab 4 - Inheritance with Shapes
 * Name: Hudson Arney
 * Created: 1/4/2022
 * Updated: 1/10/2022
 */

package arneyh;

import edu.msoe.winplotterfx.WinPlotterFX;
import javafx.scene.paint.Color;

/**
 * Circle class is a specific type of shape that has
 * additional characteristics (a height and width)
 */
public class Circle extends Shape {

    private final double radius;
    private final double width;
    private final double height;

    /**
     * Circle constructor that takes in the basic shape
     * characteristics but adds a radius
     * @param x default point on the x-axis
     * @param y default point on the y-axis
     * @param radius the length from the middle of the circle to the outer edge
     * @param color gives the circle a color characteristic
     */
    public Circle(double x, double y, double radius, Color color) {
~~~~ Java highlight
        super(x, y, color);
~~~~
!!! minus: -1 `x`, `y` different for each constructor
    The `x` and `y` for the constructor that takes a radius represents the
    center of the circle whereas the `x` and `y` for the constructor that
    takes a height and width represent the lower left corner. The way you
    have implemented this, the meaning of the `x` and `y` stored in your
    object will differ depending on the constructor used.

~~~~ Java
        this.radius = radius;
        this.width = radius;
        this.height = radius;
    }

    /**
     * Circle constructor that uses a width and height
     * @param x default point on the x-axis
     * @param y default point on the y-axis
     * @param width width of the circle
     * @param height height of the circle
     * @param color Color of the circle
     */
    public Circle(double x, double y, double width, double height, Color color) {
        super(x, y, color);
        this.width = width;
        this.height = height;
        this.radius = width / 2;
    }

    @Override
    public void draw(WinPlotterFX plotter) {
        setPenColor(plotter);
        plotter.moveTo(x + radius, y);
        final int degrees = 360;
        for(int i = 0; i &lt&#xFEFF; degrees; i++) {
            plotter.drawTo(x + radius * Math.cos(Math.toRadians(i)),
                    y + radius * Math.sin(Math.toRadians(i)));
        }
    }
}


~~~~

# FaceMaker.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2022
 * Lab 4 - Inheritance with Shapes
 * Name: Hudson Arney
 * Created: 1/4/2022
 * Updated: 1/10/2022
 */

package arneyh;

import edu.msoe.winplotterfx.WinPlotterFX;
import javafx.application.Application;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.util.Scanner;

/**
 * This class draws a face out of a bunch of rectangles.
 * @author taylor
 * @version 20191216
 */
public class FaceMaker extends Application {

    /**
     * Window Size for the GUI
     */
    public static final int WINDOW_SIZE = 600;

    /**
     * Grids for the window of the GUI
     */
    public static final int GRID_INCREMENT = WINDOW_SIZE/10;

    /**
     * Head size of the shapes. Also used for the sizes of the characteristics of the face
     */
    public static final int HEAD_SIZE = 400;

    /**
     * 0.2
     */
    public final double point2 = 0.2;

    /**
     * 0.4
     */
    public final double point4 = 0.4;

    /**
     * 0.6
     */
    public final double point6 = 0.6;

    /**
     * 0.8
     */
    public final double point8 = 0.8;


    /**
     * Launches the JavaFX application
     * @param args ignored
     */
    public static void main(String[] args) {
        launch(args);
        System.out.println("Goodbye");
    }

    /**
     * Use the Shape class and its descendants to draw a face.
     * @param stage Default stage given to a JavaFX program. Unused.
     */
    @Override
    public void start(Stage stage) {
        WinPlotterFX plotter = new WinPlotterFX();
        plotter.setWindowTitle("Face Maker");
        plotter.setWindowSize(WINDOW_SIZE, WINDOW_SIZE);
        plotter.setBackgroundColor(Color.BLACK.getRed(), Color.BLACK.getGreen(),
                Color.BLACK.getBlue());
        final boolean showGrid = true;
        plotter.setGrid(showGrid, GRID_INCREMENT, GRID_INCREMENT, Color.GRAY);

        Scanner in = new Scanner(System.in);
        String choice;

        System.out.println("""
            Enter 0 to quit\s
            Enter 1 to make a face using rectangles
            Enter 2 to make a face using triangles
            Enter 3 to make a face using circles
            Enter 4 to make a face using labeled rectangles
            Enter 5 to make a face using labeled triangles
            Enter anything else to make a face using random shapes
            """);


        choice = in.nextLine();

        Shape head = createHead(choice);
        Shape leftEye = createLeftEye(choice);
        Shape rightEye = createRightEye(choice);
        Shape nose = createNose(choice);
        Shape mouth = createMouth(choice);

        head.draw(plotter);
        leftEye.draw(plotter);
        rightEye.draw(plotter);
        nose.draw(plotter);
        mouth.draw(plotter);

        plotter.showPlotter();

    }

    /**
     * Creates and returns a shape representing the head
     * @return shape representing the head
     */
    private Shape createHead(String choice) {
        final int xLeft = (WINDOW_SIZE-HEAD_SIZE)/2;
        final int yBottom = (WINDOW_SIZE-HEAD_SIZE)/2;

        switch (choice) {
            case "1":
                return new Rectangle(xLeft, yBottom, HEAD_SIZE, HEAD_SIZE, Color.WHITE);
            case "2":
                return new Triangle(xLeft, yBottom, HEAD_SIZE, HEAD_SIZE, Color.WHITE);
            case "3":
                return new Circle(WINDOW_SIZE / 2, WINDOW_SIZE / 2,
                        HEAD_SIZE, HEAD_SIZE, Color.WHITE);
            case "4":
                return new LabeledRectangle(xLeft, yBottom, HEAD_SIZE,
                        HEAD_SIZE, Color.WHITE, "head");
            case "5":
                return new LabeledTriangle(xLeft, yBottom, HEAD_SIZE,
                        HEAD_SIZE, Color.WHITE, "head");
            default:
                double randomNum = Math.random();
                if (randomNum &lt&#xFEFF; point2) {
                    return new Rectangle(xLeft, yBottom, HEAD_SIZE, HEAD_SIZE, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point4 && randomNum > point2) {
                    return new Triangle(xLeft, yBottom, HEAD_SIZE, HEAD_SIZE, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point6 && randomNum > point4) {
                    return new Circle(WINDOW_SIZE / 2, WINDOW_SIZE / 2,
                            HEAD_SIZE, HEAD_SIZE, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point8 && randomNum > point6) {
                    return new LabeledRectangle(xLeft, yBottom, HEAD_SIZE,
                            HEAD_SIZE, Color.WHITE, "head");
                } else {
                    return new LabeledTriangle(xLeft, yBottom, HEAD_SIZE,
                            HEAD_SIZE, Color.WHITE, "head");
                }
        }
    }

    /**
     * Creates and returns a shape representing the right eye
     * @return shape representing the right eye
     */
    private Shape createRightEye(String choice) {
        final double scaleFactor = 0.15;
        final double size = scaleFactor*HEAD_SIZE;
        final double yBottom = WINDOW_SIZE/2 + size*3/2;
        final double xLeft = WINDOW_SIZE/2 + size;

        switch (choice) {
            case "1":
~~~~ Java highlight
                return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
            case "2":
                return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
            case "3":
                return new Circle(xLeft + size / 2, yBottom + size / 2, size, size, Color.WHITE);
            case "4":
                return new LabeledRectangle(xLeft, yBottom, size, size, Color.WHITE, "right eye");
            case "5":
                return new LabeledTriangle(xLeft, yBottom, size, size, Color.WHITE, "right eye");
~~~~
!!! MINUS: -1 Avoid multiple return statements
    You should avoid using multiple `return` statements within a method.
    Doing so tends to make your code harder to understand and maintain.
    We've already seen an example of this when going over the first quiz.

    There are times when it may make sense to have multiple returns in one
    method, but I want you to be able to think through how you could implement
    a method so that it has only one exit point.  As a result, this quarter I
    will be taking points off when students submit code that has multiple
    return statements in a single method.

~~~~ Java
            default:
                double randomNum = Math.random();
                if (randomNum &lt&#xFEFF; point2) {
                    return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point4 && randomNum > point2) {
                    return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point6 && randomNum > point4) {
                    return new Circle(xLeft + size / 2,
                            yBottom + size / 2, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point8 && randomNum > point6) {
                    return new LabeledRectangle(xLeft, yBottom, size,
                            size, Color.WHITE, "right eye");
                } else {
~~~~ Java highlight
                    return new LabeledTriangle(xLeft, yBottom, size,
                            size, Color.WHITE, "right eye");
                }
~~~~
!!! MINUS: -1 DRY - Don't Repeat Yourself
    The [Coding Standard](https://csse.msoe.us/cs1021/codingstandard) includes
    the following design heuristic:
    <blockquote>Don't Repeat Yourself (DRY) - Duplicated code with the same
    structure in more than one place is avoided.</blockquote>

    There is an opportunity here to refactor you code so that you
    do not have duplicate code.  Having less code typically results in
    fewer bugs and simplifies code maintenance.

    Since all of these `createWhatever()` methods need to create a new
    shape, you could create one method, perhaps `createShape(String shapeType, ...)`
    that takes in the type of shape to be created along with all of the
    details of the shape (location, color, size, name (if appropriate)).
    The method could then create the specific type of shape desired and
    return it.

    That way you could just do this here:

    ```
    return createShape(shapeType, x, y, width, height, color, "right eye");
    ```

~~~~ Java
        }
    }

    /**
     * Creates and returns a shape representing the left eye
     * @return shape representing the left eye
     */
    private Shape createLeftEye(String choice) {
        final double scaleFactor = 0.15;
        final double size = scaleFactor*HEAD_SIZE;
        final double yBottom = WINDOW_SIZE/2 + size*3/2;
        final double xLeft = WINDOW_SIZE/2 - size*2;

        switch (choice) {
            case "1":
                return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
            case "2":
                return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
            case "3":
                return new Circle(xLeft + size / 2, yBottom + size / 2, size, size, Color.WHITE);
            case "4":
                return new LabeledRectangle(xLeft, yBottom, size, size, Color.WHITE, "left eye");
            case "5":
                return new LabeledTriangle(xLeft, yBottom, size, size, Color.WHITE, "left eye");
            default:
                double randomNum = Math.random();
                if (randomNum &lt&#xFEFF; point2) {
                    return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point4 && randomNum > point2) {
                    return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point6 && randomNum > point4) {
                    return new Circle(xLeft + size / 2,
                            yBottom + size / 2, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point8 && randomNum > point6) {
                    return new LabeledRectangle(xLeft, yBottom, size,
                            size, Color.WHITE, "left eye");
                } else {
                    return new LabeledTriangle(xLeft, yBottom, size,
                            size, Color.WHITE, "left eye");
                }
        }
    }

    /**
     * Creates and returns a shape representing the nose
     * @return shape representing the nose
     */
    private Shape createNose(String choice) {
        final double scaleFactor = 0.2;
        final double size = scaleFactor*HEAD_SIZE;
        final double xLeft = WINDOW_SIZE / 2 - size / 2;
        final double yBottom = (WINDOW_SIZE) / 2;

        switch (choice) {
            case "1":
                return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
            case "2":
                return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
            case "3":
                return new Circle(xLeft + size / 2, yBottom + size / 2, size, size, Color.WHITE);
            case "4":
                return new LabeledRectangle(xLeft, yBottom, size, size, Color.WHITE, "nose");
            case "5":
                return new LabeledTriangle(xLeft, yBottom, size, size, Color.WHITE, "nose");
            default:
                double randomNum = Math.random();
                if (randomNum &lt&#xFEFF; point2) {
                    return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point4 && randomNum > point2) {
                    return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point6 && randomNum > point4) {
                    return new Circle(xLeft + size / 2,
                            yBottom + size / 2, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point8 && randomNum > point6) {
                    return new LabeledRectangle(xLeft, yBottom, size,
                            size, Color.WHITE, "nose");
                } else {
                    return new LabeledTriangle(xLeft, yBottom, size,
                            size, Color.WHITE, "nose");
                }
        }
    }

    /**
     * Creates and returns a shape representing the mouth
     * @return shape representing the mouth
     */
    private Shape createMouth(String choice) {
        final double scaleFactor = 0.3;
        final double size = scaleFactor*HEAD_SIZE;
        final double xLeft = WINDOW_SIZE / 2 - size/2;
        final double yBottom = (WINDOW_SIZE)/2 - size*3/2;

        switch (choice) {
            case "1":
                return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
            case "2":
                return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
            case "3":
                return new Circle(xLeft + size / 2, yBottom + size / 2, size, size, Color.WHITE);
            case "4":
                return new LabeledRectangle(xLeft, yBottom, size, size, Color.WHITE, "mouth");
            case "5":
                return new LabeledTriangle(xLeft, yBottom, size, size, Color.WHITE, "mouth");
            default:
                double randomNum = Math.random();
                if (randomNum &lt&#xFEFF; point2) {
                    return new Rectangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point4 && randomNum > point2) {
                    return new Triangle(xLeft, yBottom, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point6 && randomNum > point4) {
                    return new Circle(xLeft + size / 2,
                            yBottom + size / 2, size, size, Color.WHITE);
                } else if (randomNum &lt&#xFEFF;= point8 && randomNum > point6) {
                    return new LabeledRectangle(xLeft, yBottom, size,
                            size, Color.WHITE, "mouth");
                } else {
                    return new LabeledTriangle(xLeft, yBottom, size,
                            size, Color.WHITE, "mouth");
                }
        }
    }

}

~~~~

# LabeledRectangle.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2022
 * Lab 4 - Inheritance with Shapes
 * Name: Hudson Arney
 * Created: 1/4/2022
 * Updated: 1/10/2022
 */

package arneyh;

import edu.msoe.winplotterfx.WinPlotterFX;
import javafx.scene.paint.Color;

/**
 * LabeledRectangle class is a specific type of Rectangle that has
 * additional characteristics (a name)
 */
public class LabeledRectangle extends Rectangle {
    private final String name;

    /**
     * Labeled Rectangle constructor that takes in the Rectangle
     * characteristics but adds a name
     * @param x default point on the x-axis
     * @param y default point on the y-axis
     * @param width the length from the nearest x value of a point to last x value of a point
     * @param height the length from the nearest y value of a point to the last y value of a point
     * @param color gives the labeled rectangle a color characteristic
     * @param name gives a name characteristic to the labeled rectangle
     */
    public LabeledRectangle(double x, double y, double width,
                            double height, Color color, String name) {
        super(x, y, width, height, color);
        this.name = name;
    }

    @Override
    public void draw(WinPlotterFX plotter) {
        super.draw(plotter);
        plotter.printAt(x, y, name);
    }
}


~~~~

# LabeledTriangle.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2022
 * Lab 4 - Inheritance with Shapes
 * Name: Hudson Arney
 * Created: 1/4/2022
 * Updated: 1/10/2022
 */

package arneyh;

import edu.msoe.winplotterfx.WinPlotterFX;
import javafx.scene.paint.Color;

/**
 * LabeledTriangle class is a specific type of Triangle that has
 * additional characteristics (a name)
 */
public class LabeledTriangle extends Triangle {
    private final String name;

    /**
     * Labeled Triangle constructor that takes in the Triangle
     * characteristics but adds a name
     * @param x default point on the x-axis
     * @param y default point on the y-axis
     * @param base the labeled triangles bottom line
     * @param height the labeled triangle's length from the top to bottom
     * @param color gives the labeled triangle a color characteristic
     * @param name gives a name characteristic to the labeled rectangle
     */
    public LabeledTriangle(double x, double y, double base,
                           double height, Color color, String name) {
        super(x, y, base, height, color);
        this.name = name;
    }

    @Override
    public void draw(WinPlotterFX plotter) {
        super.draw(plotter);
        plotter.printAt(x, y, name);
    }
}

~~~~

# Rectangle.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2022
 * Lab 4 - Inheritance with Shapes
 * Name: Hudson Arney
 * Created: 1/4/2022
 * Updated: 1/10/2022
 */

package arneyh;

import edu.msoe.winplotterfx.WinPlotterFX;
import javafx.scene.paint.Color;

/**
 * Rectangle class is a specific type of shape that has
 * additional characteristics (a height and width)
 */
public class Rectangle extends Shape {
    protected final double height;
    protected final double width;

    /**
     * Rectangle constructor that takes in the basic shape
     * characteristics but adds a width and height
     * @param x default point on the x-axis
     * @param y default point on the y-axis
     * @param width the length from the nearest x value of a point to last x value of a point
     * @param height the length from the nearest y value of a point to the last y value of a point
     * @param color gives the rectangle a color characteristic
     */
    public Rectangle(double x, double y, double width, double height, Color color) {
        super(x, y, color);
        this.width = width;
        this.height = height;
    }

    @Override
    public void draw(WinPlotterFX plotter) {
        setPenColor(plotter);
        plotter.moveTo(x, y);
        plotter.drawTo(x + width, y);
        plotter.drawTo(x + width, y + width);
        plotter.drawTo(x, y + height);
        plotter.drawTo(x, y);
    }
}


~~~~

# Shape.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2022
 * Lab 4 - Inheritance with Shapes
 * Name: Hudson Arney
 * Created: 1/4/2022
 * Updated: 1/10/2022
 */

package arneyh;

import edu.msoe.winplotterfx.WinPlotterFX;
import javafx.scene.paint.Color;

/**
 * Shape Class
 * Used for all other classes as they are all shapes.
 * The default things every shape has is a color, as well as
 * an x and y value
 */
public abstract class Shape {
    private Color color;
    protected final double x;
    protected final double y;

    /**
     * Shape constructor that takes in an x value,
     * y value, and color
     * @param x default point on the x-axis
     * @param y default point on the y-axis
     * @param color gives the shape a color characteristic
     */
    public Shape(double x, double y, Color color) {
        this.x = x;
        this.y = y;
        this.color = color;
    }

    /**
     * Draw method that takes the characteristics of
     * a shape and applies them to a window
     * @param plotter plotter from the WinPlotterFX class that allows the program
     *                to draw
     */
    public abstract void draw(WinPlotterFX plotter);

    /**
     * Set Pen Color method that will draw the shape in a certain color.
     * @param plotter from the WinPlotterFX class
     */
    public void setPenColor(WinPlotterFX plotter) {
        plotter.setPenColor(color.getRed(), color.getGreen(), color.getBlue());
    }

    /**
     * Setter method for the color of a shape
     * @param color color of a shape
     */
    public void setColor(Color color) {
        this.color = color;
    }
}


~~~~

# Triangle.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2022
 * Lab 4 - Inheritance with Shapes
 * Name: Hudson Arney
 * Created: 1/4/2022
 * Updated: 1/10/2022
 */

package arneyh;

import edu.msoe.winplotterfx.WinPlotterFX;
import javafx.scene.paint.Color;

/**
 * Triangle class is a specific type of shape that has
 * additional characteristics (a height and base)
 */
public class Triangle extends Shape {
    protected final double base;
    protected final double height;

    /**
     * Triangle constructor that takes in the basic shape
     * characteristics but adds a base and height
     * @param x default point on the x-axis
     * @param y default point on the y-axis
     * @param base the triangles bottom line
     * @param height the triangle's length from the top to bottom
     * @param color gives the triangle a color characteristic
     */
    public Triangle(double x, double y, double base, double height, Color color) {
        super(x, y, color);
        this.base = base;
        this.height = height;
    }

    @Override
    public void draw(WinPlotterFX plotter) {
        setPenColor(plotter);
        plotter.moveTo(x, y);
        plotter.drawTo(x + base, y);
        plotter.drawTo(x + base / 2, y + height);
        plotter.drawTo(x, y);
    }
}
~~~~


<!-- Markdeep: --><script src="https://csse.msoe.us/markdeep.js?graded"></script>
